#!/usr/bin/env ruby
# frozen_string_literal: true

@supported_file_types = %w[PNG XPM JPEG TIFF PNM RAS BMP]
@wallpaper = '~/Pictures/Wallpapers/current'

def valid_image?(file)
  f_type = `file "#{file}" | cut -d " " -f 2`.strip

  @supported_file_types.include?(f_type)
end

def valid_flag?(flag)
  %w[paper theme both].include?(flag)
end

def print_help
  puts 'Usage: paper <paper|theme|both> <image>.'
  puts '  paper: will set the wallpaper.'
  puts '  theme: will set the colour theme.'
  puts '  both: sets both.'
end

def apply_paper(paper)
  `cp #{paper} #{@wallpaper}`
end

def apply_theme(paper)
  `wal -c`
  `wal --contrast 2.0 --cols16 -n -a 45 -i #{paper}`
end

def restart(app)
  test = system("pgrep #{app}")
  return unless test

  `pkill #{app}`
  spawn(app)
end

################################################################################
## Guard clauses
#

if ARGV.length != 2
  print_help
  exit 1
end

unless valid_flag?(ARGV[0])
  puts "Invalid flag: #{ARGV[0]}"
  exit 1
end

@paper_path = File.expand_path(ARGV[1])

unless valid_image?(@paper_path)
  puts "Not a recognised image file format: #{@paper_path}"
  exit 1
end

################################################################################
## Set wallpaper/theme
#

if %w[paper both].include?(ARGV[0])
  apply_paper(@paper_path)

  restart('hyprpaper')
end

if %w[theme both].include?(ARGV[0])
  apply_theme(@paper_path)

  restart('waybar')
  restart('swaync')

  system('pgrep emacs') &&
    `emacsclient -e "(load-theme 'ewal-spacemacs-classic t)"`
end

exit 0
